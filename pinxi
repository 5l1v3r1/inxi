#!/usr/bin/env perl
## INXI INFO ##
my $self_name = 'pinxi';
my $self_version = '2.9.00';
my $self_date = '2017-12-09';
my $self_patch = '017-p';

## infobash: Copyright (C) 2005-2007  Michiel de Boer a.k.a. locsmif
## inxi: Copyright (C) 2008-2017 Harald Hope
##       Additional features (C) Scott Rogers - kde, cpu info
## Further fixes (listed as known): Horst Tritremmel <hjt at sidux.com>
## Steven Barrett (aka: damentz) - usb audio patch; swap percent used patch
## Jarett.Stevens - dmidecode -M patch for older systems with the /sys
##
## License: GNU GPL v3 or greater
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## If you don't understand what Free Software is, please read (or reread)
## this page: http://www.gnu.org/philosophy/free-sw.html

use strict;
use warnings;
# use diagnostics;
use 5.008;

use Cwd; # qw(abs_path);
# use Data::Dump qw(dump); # damn, not in core modules
use Data::Dumper qw(Dumper); # print_r
use File::Basename;
use File::Find;
# use Getopt::Long qw(GetOptionsFromArray); # :config no_ignore_case bundling_values
use Getopt::Long qw(GetOptions);
# Note: default auto_abbrev is enabled, that's fine
Getopt::Long::Configure ('bundling', 'no_ignore_case');
use Net::FTP;
# use Path::Class; # maybe use, maybe not, for ls /sys
use POSIX qw(uname strftime);
use Sys::Hostname;
use Term::ANSIColor;

# we only want to use HTTP::Tiny if it's present in user system.
# It is NOT part of core modules.
my $b_tiny = 'true';
eval "use HTTP::Tiny"; # if not found, return has error messages etc
if ( $@ ) {
	$b_tiny = '';
}
# print $@ . "\n";

# use feature qw(state);

### INITIALIZE VARIABLES ###

## Self data
my $self_config_dir='';
my $self_data_dir='';
my $self_path='';

## Debuggers
my $debug=0;
my ($fh_l,$fh_c,$fh_j,$fh_x); # log, csv, json, xml file handles.
my $log_file = '';
my $end='log_data("fe", (caller(1))[3], "");';
my $start='log_data("fs", (caller(1))[3], @_);';

## Hashes
my %colors;
my %dl = (
'dl' => 'curl',
'curl' => 'true',
'wget' => 'true',
'fetch' => 'true',
'tiny' => $b_tiny
);
my %system_files;
my %sep;
my %size;
my %show;
my %test;

#my $opt_parser = Getopt::Long::Parser->new;

## Booleans
my $b_display = '';
my $b_irc='';
my $b_log = '';
my $b_log_colors = '';
my $b_log_full = '';
my $b_root='';
my $b_running_in_display='';
my $b_update = 'true';
my $b_weather = 'true';

## System
my $bsd_type = '';
my $cpu_sleep = 0.3;
my $dl_timeout = 4;
my $os = '';
my $ps_count = 5;
my $sensors_cpu_nu = 0;

## Tools
my ($b_force_dmidecode, $no_ssl,$no_ssl_opt);

## irc
my $b_dcop = '';
my $b_qdbus = '';
my $konvi = 0;

## Output
my $filter_string = '<filter>';
my $line1 = "----------------------------------------------------------------------\n";
my $line2 = "======================================================================\n";
my $line3 = "----------------------------------------\n";
my $output_type = 'print-line';
# These two determine separators in single line output, to force irc clients 
# not to break off sections
$sep{'s-1'}='~';
$sep{'s-2'}=' ';
# these will assign a separator to non irc states. Important! Using ':' can 
# trigger stupid emoticon
# behaviors in output on IRC, so do not use those.
$sep{'irc'}='';
$sep{'console'}=':';
$show{'extra'}=0; # supported values: 0-3
$size{'console'} = 115;
# Default indentation level. NOTE: actual indent is 1 greater to allow for 
# spacing
$size{'indent'} = 10;
$size{'inner'}=0; # for width minus $indent
$size{'irc'} = 130;
$size{'max'}=0;
$size{'no-display'} = 130;

# these will be set dynamically in set_display_width()
$size{'term'}=80;
$size{'term-lines'}=100;

$show{'host'} = 'true';

########################################################################
#### STARTUP
########################################################################

#### -------------------------------------------------------------------
#### MAIN
#### -------------------------------------------------------------------

sub main {
	# print Dumper \@ARGV;
	initialize();
	set_display_width('live');
	get_options();
	set_debugger(); # right after so it's set
	# print_it_out('fred', 'gus', 'sam');
	print_it_out();
	cleanup();
}

#### -------------------------------------------------------------------
#### INITIALIZE
#### -------------------------------------------------------------------

sub initialize {
	set_os();
	set_path();
	set_user_paths();
	system_files('set');
	my @config_files = (
	qq(/etc/$self_name.conf), 
	qq($self_config_dir/$self_name.conf)
	);
	set_configs(@config_files);
	set_downloader();
	### LOCALIZATION - DO NOT CHANGE! ###
	# set to default LANG to avoid locales errors with , or .
	# Make sure every program speaks English.
	$ENV{'LANG'}='C';
	$ENV{'LC_ALL'}='C';
	if ( system('tty>/dev/null') ) {
		$b_irc='true';
	}
	# print "birc: $b_irc\n";
	if ( $ENV{'DISPLAY'} ){
		$b_display = 'true';
	}
	if ( $ENV{'HOME'} eq '/root' ){
		$b_root='true';
	}
}

sub set_configs {
	my ($file, $key, $val);
	# Config files should be passed in an array as a param to this function.
	# Default intended use: global @CONFIGS;
	foreach $file (@_) {
		next unless open (CONFIG, "$file");
		while (<CONFIG>) {
			chomp;
			s/#.*//;
			s/^\s+//;
			s/\s+$//;
			s/'//g;
			s/false//; # we want this empty so it trips boolean false
			next unless length;
			($key, $val) = split(/\s*=\s*/, $_, 2);
			set_config($key,$val);
			# print "f: $file key: $key val: $val\n";
		}
		
	}
}
# args: 0: key; 1: value
sub set_config {
	my ($key,$val) = @_;
	for ($key){
		if (/B_ALLOW_UPDATE/) {$b_update = $val}
		elsif (/B_ALLOW_WEATHER/) {$b_weather = $val}
		elsif (/CPU_SLEEP/) {$cpu_sleep = $val}
		elsif (/DL_TIMEOUT/) {$dl_timeout = $val}
		elsif (/FILTER_STRING/) {$filter_string = $val}
		elsif (/PS_COUNT/) {$ps_count = $val}
		elsif (/SENSORS_CPU_NO/) {$sensors_cpu_nu = $val}
		# layout
		elsif (/CONSOLE_COLOR_SCHEME/) {$colors{'console'} = $val}
		elsif (/IRC_CONS_COLOR_SCHEME/) {$colors{'console-irc'} = $val}
		elsif (/IRC_X_TERM_COLOR_SCHEME/) {$colors{'irc-x-term'} = $val}
		elsif (/IRC_COLOR_SCHEME/) {$colors{'irc'} = $val}
		elsif (/VIRT_TERM_COLOR_SCHEME/) {$colors{'virt-term'} = $val}
		elsif (/SEP1/) {$sep{'s-1'} = $val}
		elsif (/SEP2/) {$sep{'s-2'} = $val}
		elsif (/SEP3_IRC/) {$sep{'irc'} = $val}
		elsif (/SEP3_CONSOLE/) {$sep{'console'} = $val}
		# size
		elsif (/COLS_MAX_CONSOLE/) {$size{'console'} = $val}
		elsif (/COLS_MAX_IRC/) {$size{'irc'} = $val}
		elsif (/COLS_MAX_NO_DISPLAY/) {$size{'no-display'} = $val}
	}
	#  print "mc: key: $key val: $val\n";
	# print Dumper (keys %size) . "\n";
}

# args: $1 - default OR override default cols max integer count
sub set_display_width {
	my ($width_override)=@_;
	
	if ( $width_override eq 'live' ){
		## sometimes tput will trigger an error (mageia) if irc client
		if ( ! $b_irc ){
			if ( check_program('tput') ) {
				chomp($size{'term'}=qx/tput cols/);
				chomp($size{'term-lines'}=qx/tput lines/);
			}
			# print "tc: $size{'term'} cmc: $size{'console'}\n";
			# double check, just in case it's missing functionality or whatever
			if ( $size{'term'} == 0 || $size{'term'} !~ /\d/ ){ 
				$size{'term'}=80;
				$size{'term-lines'}=100;
			}
		}
		# this lets you set different size for in or out of display server
		# if ( ! $b_running_in_display && $configs{'COLS_MAX_NO_DISPLAY'} != 0 ){
		# 	$size{'console'}=$configs{'COLS_MAX_NO_DISPLAY'};
		# }
		# term_cols is set in top globals, using tput cols
		# print "tc: $size{'term'} cmc: $size{'console'}\n";
		if ( $size{'term'} < $size{'console'} ){
			$size{'console'}=$size{'term'};
		}
		# adjust, some terminals will wrap if output cols == term cols
		$size{'console'}=( $size{'console'} - 2 );
		# echo cmc: $size{'console'}
		# comes after source for user set stuff
		if ( ! $b_irc ){
			$size{'max'}=$size{'console'};
		}
		else {
			$size{'max'}=$size{'irc'};
		}
	}
	else {
		$size{'max'}=$width_override;
	}
	$size{'inner'}= ( $size{'max'} - $size{'indent'} - 1 );
	# print "tc: $size{'term'} cmc: $size{'console'} cm: $size{'max'} ci: $size{'inner'}\n";
}

sub set_os {
	my @uname = uname();
	$os = lc($uname[0]);
	if ( $os =~ /(bsd|dragonfly|darwin)/ ){
		if ( $os =~ /openbsd/ ){
			$os = 'openbsd';
		}
		elsif ($os =~ /darwin/){
			$os = 'darwin';
		}
		if ($os =~ /kfreebsd/){
			$bsd_type = 'debian-bsd';
		}
		else {
			$bsd_type = 'bsd';
		}
	}
}

sub set_path {
	my $added_paths = '';
	# Extra path variable to make execute failures less likely, merged below
	my @path = split ':', $ENV{'PATH'};
	my @extra_paths=split ':', '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/opt/local/bin';
	#print "PATH=$ENV{'PATH'}\n";
	# this needs to be set here because various options call the parent 
	# initialize function directly.
	$self_path=dirname "$0";
	# Create a difference of $PATH and $extra_paths and add that to $PATH:
	foreach (@extra_paths) {
		if ( ! grep(/$_/, @path) ){
			$added_paths="$added_paths:$_";
			# print "$path\n";
		}
	}
	$ENV{'PATH'} = $ENV{'PATH'} . $added_paths;
	# print "PATH=$ENV{'PATH'}\n";
	##/bin/sh -c 'echo "PATH in subshell=\"$PATH\""'
}

sub set_user_paths {
	my ( $b_conf, $b_data );
	
	if ( defined $ENV{'XDG_CONFIG_HOME'} && $ENV{'XDG_CONFIG_HOME'} ne '' ){
		$self_config_dir=$ENV{'XDG_CONFIG_HOME'};
		$b_conf='true';
	}
	elsif ( -d "$ENV{'HOME'}/.config" ){
		$self_config_dir="$ENV{'HOME'}/.config";
		$b_conf='true';
	}
	else {
		$self_config_dir="$ENV{'HOME'}/.$self_name";
	}
	if ( defined $ENV{'XDG_DATA_HOME'} && $ENV{'XDG_DATA_HOME'} ne '' ){
		$self_data_dir="$ENV{'XDG_DATA_HOME'}/$self_name";
		$b_data='true';
	}
	elsif ( -d "$ENV{'HOME'}/.local/share" ){
		$self_data_dir="$ENV{'HOME'}/.local/share/$self_name";
		$b_data='true';
	}
	else {
		$self_data_dir="$ENV{'HOME'}/.$self_name";
	}
	# note, this used to be created/checked in specific instance, but we'll just do it
	# universally so it's done at script start.
	if ( ! -d $self_data_dir ){
		mkdir $self_data_dir;
		system "echo", "Made: $self_data_dir";
	}
	if ( $b_conf && -f "$ENV{'HOME'}/.$self_name/$self_name.conf" ){
		#system 'mv', "-f $ENV{'HOME'}/.$self_name/$self_name.conf", $self_config_dir;
		print "WOULD: Moved $self_name.conf from $ENV{'HOME'}/.$self_name to $self_config_dir\n";
	}
	if ( $b_data && -d "$ENV{'HOME'}/.$self_name" ){
		#system 'mv', '-f', "$ENV{'HOME'}/.$self_name/*", $self_data_dir;
		#system 'rm', '-Rf', "$ENV{'HOME'}/.$self_name";
		print "WOULD: Moved data dir $ENV{'HOME'}/.$self_name to $self_data_dir\n";
	}
	#system 'echo', "$ENV{'HOME'}/.$self_name/* $self_data_dir";
	# print "scd: $self_config_dir sdd: $self_data_dir \n";
}
# args: 1: set|hash key to return either null or path
sub system_files {
	my ($type) = @_;
	
	if ( $type eq 'set'){
		my %files = (
		'asound-cards' => '/proc/asound/cards',
		'asound-modules' => '/proc/asound/modules',
		'asound-version' => '/proc/asound/version',
		'cpuinfo' => '/proc/cpuinfo',
		'dmesg-boot' => '/var/run/dmesg.boot',
		'lsb-release' => '/etc/lsb-release',
		'mdstat' => '/proc/mdstat',
		'meminfo' => '/proc/meminfo',
		'modules' => '/proc/modules',
		'mounts' => '/proc/mounts',
		'os-release' => '/etc/os-release',
		'partitions' => '/proc/partitions',
		'scsi' => '/proc/scsi/scsi',
		'xorg-log' => '/var/log/Xorg.0.log'
		);
		foreach my $key ( keys %files ){
			$system_files{$key} = -e $files{$key} ? $files{$key} : '';
		}
		if ( ! $system_files{'xorg-log'} && check_program('xset') ){
			my $data = qx(xset q 2>/dev/null);
			foreach ( split /\n/, $data){
				if ($_ =~ /Log file/i){
					$system_files{'xorg-log'} = get_piece($_,3);
					last;
				}
			}
		}
	}
	else {
		return $system_files{$type};
	}
}


########################################################################
#### UTILITIES
########################################################################

#### -------------------------------------------------------------------
#### COLOR SELECTOR
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### DEBUGGERS
#### -------------------------------------------------------------------


sub set_debugger {
	if ( $debug < 10 || $debug > 12){
		$end = '';
		$start = '';
	}
	elsif ($debug =~ /^1[0-2]$/){
		$b_log = 'true';
		if ($debug == 11){
			$b_log_full = 'true';
		}
		elsif ($debug == 12){
			$b_log_colors = 'true';
		}
		begin_logging();
	}
}


#### -------------------------------------------------------------------
#### DOWNLOADER
#### -------------------------------------------------------------------

sub set_downloader {
	if ( check_program('curl') && $dl{'curl'} ){
		$dl{'dl'} = 'curl';
		$no_ssl = ' --insecure';
	}
	elsif (check_program('wget') && $dl{'curl'} ){
		$dl{'dl'} = 'wget';
		$no_ssl = ' --no-check-certificate';
	}
	elsif (check_program('fetch') && $dl{'curl'} ){
		$dl{'dl'} = 'fetch';
		$no_ssl = ' --no-verify-peer';
	}
	elsif ($dl{'curl'}){
		$dl{'dl'} = 'tiny';
	}
	elsif ( $bsd_type eq 'openbsd' && check_program('ftp') ){
		$dl{'dl'} = 'ftp';
	}
	else {
		$dl{'dl'} = '';
	}
}


#### -------------------------------------------------------------------
#### ERROR HANDLER
#### -------------------------------------------------------------------

sub error_handler {
	my ( $num, $one, $two) = @_;
	print "Error $num: option: $one";
	if ($two){
		print " value: $two is incorrect.";
	}
	print "\nCheck -h for correct parameters.\n";
	exit $num;
}

#### -------------------------------------------------------------------
#### LOGGING
#### -------------------------------------------------------------------

# called in the initial -@ 10 script args setting so we can get logging 
# as soon as possible # will have max 3 files, inxi.log, inxi.1.log, 
# inxi.2.log
sub begin_logging {
	$log_file="$self_data_dir/$self_name.log";
	my $log_file_2="$self_data_dir/$self_name.1.log";
	my $log_file_3="$self_data_dir/$self_name.2.log";
	my $data = '';
	
	my $now = strftime "%Y-%m-%d %H:%M:%S", localtime;
	# do the rotation if logfile exists
	if ( -f $log_file ){
		# copy if present second to third
		if ( -f $log_file_2 ){
			rename $log_file_2, $log_file_3 or error_handler(3, "$log_file_2 -> $log_file_3", '');
		}
		# then copy initial to second
		rename $log_file, $log_file_2 or error_handler(3, "$log_file -> $log_file_2", '');
	}
	# now create the logfile
	# print "Opening log file for reading: $log_file\n";
	open $fh_l, '>', $log_file or error_handler(4, $log_file, '');
	# and echo the start data
	$data = $line2;
	$data = $data . "START $self_name LOGGING:\n";
	$data = $data . "$now\n";
	$data = $data .  $line2;
	print $fh_l $data;
}

# NOTE: no logging available until get_parameters is run, since that's what 
# sets logging # in order to trigger earlier logging manually set $b_log
# to true in top variables.
# arg: $one alone: logs data; $two with or without $three logs func start/end.
# arg: $one type (fs/fe/cat/raw) or logged data; 
# [$two is function name; [$three - function args]]
sub log_data {
	return if ! $b_log;
	my ($one, $two, @args) = @_;
	my $args = '';
	my $data = '';
	my $spacer = '   ';
	# print "1: $one 2: $two 3: $three\n";
	for ($one){
		if (/^fs$/) {
			if (@args){
				$args = "\n${spacer}Args: " . join(', ', @args) . '; ';
			}
			else {
				$args = "\n${spacer}Args: None; ";
			}
			$data = "Start: Function: $two$args\n";
			$spacer='';
		}
		elsif (/^fe$/) {
			$data = "End: Function: $two\n";
			$spacer='';
		}
		elsif (/^cat$/) {
			if ( $b_log_full ){
				for my $file ($two){
					my $contents = do { local( @ARGV, $/ ) = $file; <> }; # or: qx(cat $file)
					$data = "$data${line3}Full file data: $file\n\n$contents\n$line3\n";
				}
				$spacer='';
			}
		}
		elsif (/^raw$/) {
			if ( $b_log_full ){
				$data = "\n${line3}Raw System Data:\n\n$two\n$line3";
				$spacer='';
			}
		}
		else {
			$data = "$one\n";
		}
	}
	# print "d: $data";
	if ($data){
		print $fh_l "$spacer$data";
	}
}

#### -------------------------------------------------------------------
#### RECOMMENDS
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### TOOLS
#### -------------------------------------------------------------------

## returns result of test, 0/1, false/true
## arg: program to find in PATH
sub check_program {
	grep { -x "$_/$_[0]"}split /:/,$ENV{PATH};
}

sub cleanup {
	foreach my $fh ($fh_l, $fh_c, $fh_j, $fh_x){
		if ($fh){
			close $fh;
		}
	}
}

sub get_piece {
	my ($string, $num, $sep) = @_;
	$num--;
	$sep ||= ' ';
	my @temp = split $sep, $string, -1;
	if ( exists $temp[$num] ){
		return $temp[$num];
	}
}



#### -------------------------------------------------------------------
#### UPDATER
##### -------------------------------------------------------------------

sub update_me {
	my ( $self_download, $download_id ) = @_;
	
	print "$self_download\n";
	
}

sub get_download_url {
	my ($type) = @_;
	my @urls = (
	'https://github.com/smxi/inxi/raw/inxi-perl/pinxi',
	# 'https://github.com/smxi/inxi/raw/one/inxi',
	# 'https://github.com/smxi/inxi/raw/two/inxi',
	);
	if ( $urls[$type] ){
		return $urls[$type];
	}
}

########################################################################
#### OPTIONS HANDLER
########################################################################

sub get_options{
	my (@args) = @_;
	# my @argv = @ARGV;
	$show{'short'} = 'true';
	# $show{''} = 'true';
	#$opt_parser->configure('no_ignore_case');
	# GetOptionsFromArray(\@argv, 
	GetOptions (
	'A|audio' => sub {
		$show{'short'} = '';
		$show{'audio'} = 'true';},
	'b|basic' => sub {
		$show{'short'} = '';
		$show{'battery'} = 'true';
		$show{'cpu-basic'} = 'true';
		$show{'raid-basic'} = 'true';
		$show{'disk-total'} = 'true';
		$show{'graphics'} = 'true';
		$show{'info'} = 'true';
		$show{'machine'} = 'true';
		$show{'network'} = 'true';},
	'B|battery' => sub {
		$show{'short'} = '';
		$show{'battery'} = 'true';
		$show{'battery-forced'} = 'true'; },
	'c|color:i' => sub {
		$show{'short'} = '';
		# $show{''} = 'true'; 
		},
	'C|cpu' => sub {
		$show{'short'} = '';
		$show{'cpu'} = 'true'; },
	'd|disk-all' => sub {
		$show{'short'} = '';
		$show{'disk'} = 'true';
		$show{'optical-full'} = 'true'; },
	'D' => sub {
		$show{'short'} = '';
		$show{'disk'} = 'true'; },
	'f|cpu-flags' => sub {
		$show{'short'} = '';
		$show{'cpu'} = 'true';
		$show{'cpu-flags'} = 'true'; },
	'F|full' => sub {
		$show{'short'} = '';
		$show{'audio'} = 'true';
		$show{'battery'} = 'true';
		$show{'cpu'} = 'true';
		$show{'disk'} = 'true';
		$show{'graphics'} = 'true';
		$show{'info'} = 'true';
		$show{'machine'} = 'true';
		$show{'network'} = 'true';
		$show{'network-advanced'} = 'true';
		$show{'partitions'} = 'true';
		$show{'raid'} = 'true';
		$show{'sensors'} = 'true';
		$show{'system'} = 'true'; },
	'G|graphics' => sub {
		$show{'short'} = '';
		$show{'graphics'} = 'true'; },
	'i|ip' => sub {
		$show{'short'} = '';
		$show{'ip'} = 'true';
		$show{'network'} = 'true';
		$show{'network-advanced'} = 'true'; },
	'I|info' => sub {
		$show{'short'} = '';
		$show{'info'} = 'true'; },
	'l|label' => sub {
		$show{'short'} = '';
		$show{'labels'} = 'true';
		$show{'partitions'} = 'true'; },
	'm|memory' => sub {
		$show{'short'} = '';
		$show{'memory'} = 'true'; },
	'M|machine' => sub {
		$show{'short'} = '';
		$show{'machine'} = 'true'; },
	'n|network-advanced' => sub {
		$show{'short'} = '';
		$show{'network'} = 'true';
		$show{'network-advanced'} = 'true'; },
	'N|network' => sub {
		$show{'short'} = '';
		$show{'network'} = 'true'; },
	'o|unmounted' => sub {
		$show{'short'} = '';
		$show{'unmounted'} = 'true'; },
	'p|partitions-full' => sub {
		$show{'short'} = '';
		$show{'partitions'} = 'true';
		$show{'partitions-full'} = 'true'; },
	'P|partitions' => sub {
		$show{'short'} = '';
		$show{'partitions'} = 'true'; },
	'r|repos' => sub {
		$show{'short'} = '';
		$show{'repos'} = 'true'; },
	'R|raid' => sub {
		$show{'short'} = '';
		$show{'raid'} = 'true';
		$show{'raid-forced'} = 'true'; },
	's|sensors' => sub {
		$show{'short'} = '';
		$show{'sensors'} = 'true'; },
	'S|system' => sub {
		$show{'short'} = '';
		$show{'system'} = 'true'; },
	't|processes:s' => sub {
		my ($opt,$arg) = @_;
		$show{'short'} = '';
		if ( $arg =~ /^([cm]+)([1-9]|1[0-9]|20)?$/ ){
			if ($arg =~ /c/){
				$show{'ps-cpu'} = 'true';
			}
			if ($arg =~ /m/){
				$show{'ps-mem'} = 'true';
			}
			if ($arg =~ /([0-9]+)/ ){
				$ps_count = $1;
			}
		}
		else {
			error_handler(100,$opt,$arg);
		} },
	'u|uuid' => sub {
		$show{'short'} = '';
		$show{'partitions'} = 'true';
		$show{'uuids'} = 'true'; },
	'U|update:s' => sub { # 1,2,3 OR ftp.server.com/incoming
		my ($opt,$arg) = @_;
		$show{'short'} = '';
		my ($self_download,$download_id);
		if ( $b_update ){
			if ( $arg =~ /^\d$/){
				$download_id = "branch-$arg";
				$self_download = get_download_url($arg);
			}
			elsif ( $arg =~ /^http/){
				$download_id = 'alt-server';
				$self_download = $arg;
			}
			else {
				$download_id = 'source server';
				$self_download = get_download_url(0);
			}
			if ($self_download){
				update_me( $self_download, $download_id );
			}
			else {
				error_handler(18, $opt);
			}
		}
		else {
			error_handler(17, $opt);
		} },
	'v|verbosity:i' => sub {
		my ($opt,$arg) = @_;
		$show{'short'} = '';
		if ( $arg =~ /^[0-7]$/ ){
			if ($arg == 0 ){
				$show{'short'} = 'true';
			}
			if ($arg >= 1 ){
				$show{'cpu-basic'} = 'true';
				$show{'disk-total'} = 'true';
				$show{'graphics'} = 'true';
				$show{'info'} = 'true';
				$show{'system'} = 'true';
			}
			if ($arg >= 2 ){
				$show{'battery'} = 'true';
				$show{'disk-basic'} = 'true';
				$show{'raid-basic'} = 'true';
				$show{'machine'} = 'true';
				$show{'network'} = 'true';
			}
			if ($arg >= 3 ){
				$show{'network-advanced'} = 'true';
				$show{'cpu'} = 'true';
				$show{'extra'} = 1;
			}
			if ($arg >= 4 ){
				$show{'disk'} = 'true';
				$show{'partitions'} = 'true';
			}
			if ($arg >= 5 ){
				$show{'audio'} = 'true';
				$show{'memory'} = 'true';
				$show{'labels'} = 'true';
				$show{'memory'} = 'true';
				$show{'raid'} = 'true';
				$show{'sensors'} = 'true';
				$show{'uuid'} = 'true';
			}
			if ($arg >= 6 ){
				$show{'optical-full'} = 'true';
				$show{'partitions-full'} = 'true';
				$show{'unmounted'} = 'true';
				$show{'extra'} = 2;
			}
			if ($arg >= 7 ){
				$show{'ip'} = 'true';
				$show{'raid-forced'} = 'true';
				$show{'extra'} = 3;
			}
		}
		else {
			error_handler(100,$opt,$arg);
		} },
	'V|version' => sub { 
		$output_type = 'print-basic';
		show_version(); },
	'w|weather' => sub {
		$show{'short'} = '';
		if ( $b_weather ){
			$show{'weather'} = 'true';
		} },
	'W|weather-location' => sub {
		$show{'short'} = '';
		if ( $b_weather ){
			$show{'weather'} = 'true';
			$show{'weather-location'} = 'true';
		} },
	'x|extra:i' => sub {
		my ($opt,$arg) = @_;
		if ($arg > 0){
			$show{'extra'} = $arg;
		}
		else {
			$show{'extra'}++;
		} },
	'y|width:i' => sub {
		my ($opt, $arg) = @_;
		if ( $arg =~ /\d/ && $arg >= 80 ){
			set_display_width($arg);
		}
		else {
			error_handler(21, $opt, $arg);
		} },
	'z|filter' => sub {
		$show{'filter'} = 'true'; },
	'Z|filter-override' => sub {
		$show{'filter-override'} = 'true'; },
	'h|help|?' => sub {
		$output_type = 'print-basic';
		show_options('standard'); },
	'H|help-full' => sub {
		$output_type = 'print-basic';
		show_options('full'); },
	'debug:i' => sub { 
		my ($opt,$arg) = @_;
		if ($arg =~ /^[1-3]|[1-2][0-2]$/){
			$debug=$arg;
		}
		else {
			error_handler(21, $opt, $arg);
		} },
	'alt:i' => sub { 
		my ($opt,$arg) = @_;
		my %alts = (
		'1' => sub {$test{'1'} = 'true';},
		'2' => sub {$test{'2'} = 'true';},
		'3' => sub {$test{'3'} = 'true';},
		'30' => sub {$b_irc = '';},
		'31' => sub {$show{'host'} = '';},
		'32' => sub {$show{'host'} = 'true';},
		'34' => sub {$no_ssl_opt=$no_ssl;},
		'41' => sub {
			$dl{'curl'} = '';
			set_downloader();},
		'42' => sub {
			$dl{'fetch'} = '';
			set_downloader();},
		'43' => sub {
			$dl{'wget'} = '';
			set_downloader();
		},
		'44' => sub {
			$dl{'curl'} = '';
			$dl{'fetch'} = '';
			$dl{'wget'} = '';
			set_downloader();
		}
		);
		if ($alts{$arg}){
			$alts{$arg}->();
		}
		else {
			error_handler(21, $opt, $arg);
		}
		print "alt $arg\n"; },
	'<>' => sub {
		my ($opt) = @_;
		error_handler(2, "Unknown argument: $opt", "" ); }
	) or error_handler(3, 'Unknown Option', '');
# 	print "dump\n" . Dumper \@ARGV;
# 	if ( @ARGV ) {
# 		error_handler(1, "Uknown option $ARGV[0] given!", "" );
# 		@ARGV=undef;
# 	}
	#@ARGV = @argv; 
} 

sub show_optionsXX {
	print "stub: " . (caller(0))[3] . "\n";
	exit 1;
}
sub show_options {
	if ( $b_irc ){
		print_screen_line("Sorry, you can't run the help option in an IRC client.\n");
		exit 1;
	}
	my ($type) = @_;
	my (@row,@rows,@data);
	my $color_scheme_count=12; # $(( ${#A_COLOR_SCHEMES[@]} - 1 ));
	my $partition_string='partition';
	my $partition_string_u='Partition';
	if ( $bsd_type ){
		$partition_string='slice';
		$partition_string_u='Slice';
	}
	@rows = (
	['0', '', '', "$self_name supports the following options. You can combine 
	them, or list them one by one. Examples: $self_name^-v4^-c6 OR 
	$self_name^-bDc^6. If you start $self_name with no arguments, it will show 
	the short form." ],
	[0, '', '', '' ],
	['0', '', '', "The following options if used without -F, -b, or -v will show 
	just option line(s): A, B, C, D, G, I, M, N, P, R, S, f, i, m, n, o, p, l, 
	u, r, s, t - you can use these alone or together to show just the line(s) 
	you want to see. If you use them with -v^[level], -b or -F, it will show the 
	full output for that line along with the output for the chosen verbosity level." ],
	['0', '', '', "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -" ],
	['0', '', '', "Output Control Options:" ],
	['1', '-A', '--audio', "Audio/sound card information." ],
	['1', '-b', '--basic', "Basic output, short form. Like $self_name^-v^2, only minus hard 
	disk names ." ],
	['1', '-B', '--battery', "Battery info, shows charge, condition, plus extra information 
	(if battery present)." ],
	['1', '-c', '--color', "Color schemes. Scheme number is required. Color selectors run a 
	color selector option prior to $self_name starting which lets you set the 
	config file value for the selection." ],
	['1', '', '', "Supported color schemes: 0-$color_scheme_count 
	Example:^$self_name^-c^11" ],
	['1', '', '', "Color selectors for each type display (NOTE: irc and global only 
	show safe color set):" ],
	['2', '94', '', "Console, out of X" ],
	['2', '95', '', "Terminal, running in X - like xTerm" ],
	['2', '96', '', "Gui IRC, running in X - like Xchat, Quassel, Konversation etc." ],
	['2', '97', '', "Console IRC running in X - like irssi in xTerm" ],
	['2', '98', '', "Console IRC not in  X" ],
	['2', '99', '', "Global - Overrides/removes all settings. Setting specific 
	removes global." ],
	['1', '-C', '--cpu', "CPU output, including per CPU clockspeed and max CPU speed 
	(if available)." ],
	['1', '-d', '--optical', "Optical drive data (and floppy disks, if present). Same as -Dd. 
	See also -x and -xx." ],
	['1', '-D', '--disk', "Full hard Disk info, not only model, ie: /dev/sda ST380817AS 
	80.0GB. See also -x and -xx. Disk total used percentage includes swap 
	partition size(s)." ],
	['1', '-f', '--flags', "All cpu flags, triggers -C. Not shown with -F to avoid spamming. 
	ARM cpus show 'features'." ],
	['1', '-F', '--full', "Full output for $self_name. Includes all Upper Case line letters, 
	plus -s and -n. Does not show extra verbose options like 
	-d -f -l -m -o -p -r -t -u -x" ],
	['1', '-G', '--graphics', "Graphic card information (card, display server type/version, 
	resolution, renderer, OpenGL version)." ],
	['1', '-i', '--ip', "Wan IP address, and shows local interfaces (requires ifconfig 
	network tool). Same as -Nni. Not shown with -F for user security reasons, 
	you shouldn't paste your local/wan IP." ],
	['1', '-I', '--info', "Information: processes, uptime, memory, irc client (or shell type),
	$self_name version." ],
	['1', '-l', '--label', "$partition_string_u labels. Default: short $partition_string -P. 
	For full -p output, use: -pl (or -plu)." ],
	['1', '-m', '--memory', "Memory (RAM) data. Physical system memory array(s), capacity, 
	how many devices (slots) supported, and individual memory devices 
	(sticks of memory etc). For devices, shows device locator, size, speed, 
	type (like: DDR3). If neither -I nor -tm are selected, also shows 
	ram used/total. Also see -x, -xx, -xxx" ],
	['1', '-M', '--machine', "Machine data. Device type (desktop, server, laptop, VM etc.), 
	Motherboard, Bios, and if present, System Builder (Like Lenovo). 
	Shows UEFI/BIOS/UEFI [Legacy]. Older systems/kernels without the 
	required /sys data can use dmidecode instead, run as root. 
	Dmidecode can be forced with -! 33" ],
	['1', '-n', '--network-advanced', "Advanced Network card information. Same as -Nn. Shows interface, 
	speed, mac id, state, etc." ],
	['1', '-N', '--network', "Network card information. With -x, shows PCI BusID, Port number." ],
	['1', '-o', '--unmounted', "Unmounted $partition_string information (includes UUID and 
	LABEL if available). Shows file system type if you have file installed, 
	if you are root OR if you have added to /etc/sudoers (sudo v. 1.7 or 
	newer) Example:^<username>^ALL^=^NOPASSWD:^/usr/bin/file^" ],
	['1', '-p', '--partitions-full', "Full $partition_string information (-P plus all other 
	detected ${partition_string}s)." ],
	['1', '-P', '--partitions', "Basic $partition_string information (shows what -v^4 would 
	show, but without extra data). Shows, if detected: 
	/ /boot /home /opt /tmp /usr /var /var/log /var/tmp . 
	Use -p to see all mounted ${partition_string}s." ],
	['1', '-r', '--repos', "Distro repository data. Supported repo types: APK; APT; PACMAN; 
	PISI; PORTAGE; PORTS (BSDs); SLACKPKG; URPMQ; YUM; ZYPP." ],
	['1', '-R', '--raid', "RAID data. Shows RAID devices, states, levels, and components, 
	and extra data with -x/-xx. md-raid: If device is resyncing, shows resync 
	progress line as well." ],
	['1', '-s', '--sensors', "Sensors output (if sensors installed/configured): mobo/cpu/gpu temp; 
	detected fan speeds. Gpu temp only for Fglrx/Nvidia drivers. Nvidia shows 
	screen number for > 1 screens." ],
	['1', '-S', '--system', "System information: host name, kernel, desktop environment 
	(if in X), distro" ],
	['1', '-t', '--processes', "Processes. Requires extra options: c^(cpu) m^(memory) cm^(cpu+memory). 
	If followed by numbers 1-20, shows that number of processes for each type 
	(default:^$ps_count; if in irc, max:^5): -t^cm10" ],
	['1', '', '', "Make sure to have no space between letters and numbers 
	(-t^cm10 - right, -t^cm^10 - wrong)." ],
	['1', '-u', '--uuid', "$partition_string_u UUIDs. Default: short $partition_string -P. 
	For full -p output, use: -pu (or -plu)." ],
	['1', '-v', '--verbosity', "Script verbosity levels. Verbosity level number is required. 
	Should not be used with -b or -F" ],
	['1', '', '', "Supported levels: 0-7 Example: $self_name^-v^4" ],
	['2', '0', '', "Short output, same as: $self_name" ],
	['2', '1', '', "Basic verbose, -S + basic CPU + -G + basic Disk + -I." ],
	['2', '2', '', "Networking card (-N), Machine (-M) data, if present, Battery (-B), 
	basic hard disk data (names only), and, if present, basic raid (devices only, 
	and if inactive, notes that). similar to: $self_name^-b" ],
	['2', '3', '', "Advanced CPU (-C), battery, network (-n) data, and switches on 
	-x advanced data option." ],
	['2', '4', '', "$partition_string_u size/filled data (-P) for (if present): /, 
	/home, /var/, /boot. Shows full disk data (-D)." ],
	['2', '5', '', "Audio card (-A); sensors^(-s), memory/ram^(-m), 
	$partition_string label^(-l) and UUID^(-u), short form of optical drives, 
	standard raid data (-R)." ],
	['2', '6', '', "Full $partition_string (-p), unmounted $partition_string (-o), 
	optical drive (-d), full raid; triggers -xx." ],
	['2', '7', '', "Network IP data (-i); triggers -xxx."]
	);
	push @data, @rows;
	# if distro maintainers don't want the weather feature disable it
	if ( $b_weather ){
		@rows = (
		['1', '-w', '--weather', "Local weather data/time. To check an alternate location, 
		see: -W^<location>. For extra weather data options see -x, -xx, and -xxx."],
		['1', '-W', '--weather-location', "<location> Supported options for <location>: postal code; 
		city, state/country; latitude, longitude. Only use if you want the weather 
		somewhere other than the machine running $self_name. Use only ascii 
		characters, replace spaces in city/state/country names with '+'. 
		Example:^$self_name^-W^new+york,ny"]
		);
		push @data, @rows;
	}
	@rows = (
	['1', '-x', '-extra', "Adds the following extra data (only works with verbose or line 
	output, not short form):" ],
	['2', '-B', '', "Vendor/model, status (if available)" ],
	['2', '-C', '', "CPU Flags, Bogomips on Cpu;CPU microarchitecture / revision if 
	found, like: (Sandy Bridge rev.2)" ],
	['2', '-d', '', "Extra optical drive data; adds rev version to optical drive." ],
	['2', '-D', '', "Hdd temp with disk data if you have hddtemp installed, if you are 
	root OR if you have added to /etc/sudoers (sudo v. 1.7 or newer) 
	Example:^<username>^ALL^=^NOPASSWD:^/usr/sbin/hddtemp" ],
	['2', '-G', '', "Direct rendering status for Graphics (in X)." ],
	['2', '-G', '', "(for single gpu, nvidia driver) screen number gpu is running on." ],
	['2', '-i', '', "For IPv6, show additional IP v6 scope addresses: Global, Site, 
	Temporary, Unknown." ],
	['2', '-I', '', "System GCC, default. With -xx, also show other installed 
	GCC versions. If running in console, not in IRC client, shows shell 
	version number, if detected. Init/RC Type and runlevel (if available)." ],
	['2', '-m', '', "Part number; Max memory module size (if available)." ],
	['2', '-N -A', '', "Version/port(s)/driver version (if available) for Network/Audio;" ],
	['2', '-N -A -G', '', "Network, audio, graphics, shows PCI Bus ID/Usb ID 
	number of card." ],
	['2', '-R', '', "md-raid: Shows component raid id. Adds second RAID Info line: 
	raid level; report on drives (like 5/5); blocks; chunk size; bitmap (if present). 
	Resync line, shows blocks synced/total blocks. zfs-raid:	Shows raid array 
	full size; available size; portion allocated to RAID" ],
	['2', '-S', '', "Desktop toolkit if available (GNOME/XFCE/KDE only); Kernel 
	gcc version" ],
	['2', '-t', '', "Memory use output to cpu (-xt c), and cpu use to memory (-xt m)." ]
	);
	push @data, @rows;
	if ( $b_weather eq 'true' ){
		@rows = (['2', '-w -W', '', "Wind speed and time zone (-w only)." ]);
		push @data, @rows;
	}
	@rows = (
	['1', '-xx', '--extra 2', "Show extra, extra data (only works with verbose or line output, 
	not short form):" ],
	['2', '-A', '', "Chip vendor:product ID for each audio device." ],
	['2', '-B', '', "serial number, voltage (if available)." ],
	['2', '-C', '', "Minimum CPU speed, if available." ],
	['2', '-D', '', "Disk serial number; Firmware rev. if available." ],
	['2', '-G', '', "Chip vendor:product ID for each video card; (mir/wayland only) 
	compositor (alpha test); OpenGL compatibility version, if free drivers and 
	available." ],
	['2', '-I', '', "Other detected installed gcc versions (if present). System 
	default runlevel. Adds parent program (or tty) for shell info if not in IRC
	(like Konsole or Gterm). Adds Init/RC (if found) version number." ],
	['2', '-m', '', "Manufacturer, Serial Number, single/double bank (if found)." ],
	['2', '-M', '', "Chassis information, bios rom size (dmidecode only), if data for 
	either is available." ],
	['2', '-N', '', "Chip vendor:product ID for each nic." ],
	['2', '-R', '', "md-raid: Superblock (if present); algorythm, U data. Adds 
	system info line (kernel support,read ahead, raid events). If present, 
	adds unused device line. Resync line, shows progress bar." ],
	['2', '-S', '', "Display manager (dm) in desktop output, if in X 
	(like kdm, gdm3, lightdm)." ],
	);
	push @data, @rows;
	if ( $b_weather ){
		@rows = (['2', '-w -W', '', "Humidity, barometric pressure." ]);
		push @data, @rows;
	}
	@rows = (
	['1', '-xxx', '--extra 3', "Show extra, extra, extra data (only works with verbose or 
	line output, not short form):" ],
	['2', '-B', '', "chemistry, cycles, location (if available)." ],
	['2', '-m', '', "Width of memory bus, data and total (if present and greater 
	than data); Detail, if present, for Type; module voltage, if available." ],
	['2', '-S', '', "Panel/shell information in desktop output, if in X 
	(like gnome-shell, cinnamon, mate-panel)." ]
	);
	push @data, @rows;
	if ( $b_weather ){
		@rows = (['2', '-w -W', '', "Location (uses -z/irc filter), weather 
		observation time, wind chill, heat index, dew point (shows extra lines 
		for data where relevant)." ] );
		push @data, @rows;
	}
	@rows = (
	['1', '-y', '--width', "Required extra option: integer, 80 or greater. Set the output 
	line width max. Overrides IRC/Terminal settings or actual widths. If used 
	with -h, put -y option first. Example:^inxi^-y^130" ],
	['1', '-z', '--filter', "Security filters for IP/Mac addresses, location, user home 
	directory name. Default on for irc clients." ],
	['1', '-Z', '--filter-override', "Absolute override for output filters. Useful for debugging 
	networking issues in irc for example." ],
	[0, '', '', '' ],
	[0, '', '', "Additional Options:" ],
	['1', '-h', '--help', "This help menu." ],
	['1', '-H', '--help-full', "This help menu, plus developer options. Do not use dev options in 
	normal operation!" ],
	['1', '', '--recommends', "Checks $self_name application dependencies + recommends, 
	and directories, then shows what package(s) you need to install to add support 
	for that feature. " ]
	);
	push @data, @rows;
	if ( $b_update ){
		@rows = (
		['1', '-U', '--update', "Auto-update script. Will also install/update man page. 
		Note: if you installed as root, you must be root to update, otherwise user 
		is fine. Man page installs require root user mode. No arguments downloads from main 
		$self_name git repo." ],
		['1', '', '', "Use alternate sources for updating $self_name" ],
		
		['2', '1', '', "Get the git branch one version." ],
		['2', '2', '', "Get the git branch two version." ],
		['2', '<http>', '', "Get a version of $self_name from your own server if you want, 
		put the full download path, like: $self_name -U https://myserver.com/inxi" ]
		);
		push @data, @rows;
		
	}
	@rows = (
	['1', '-V', '--version', "$self_name version information. Prints information 
	then exits." ],
	[0, '', '', '' ],
	[0, '', '', "Debugging Options:" ],
	['1', '', '--alt 0', "Overrides defective or corrupted data." ],
	['1', '', '--debugger', "Triggers debugging modes." ],
	['2', '1-3', '', "On screen $self_name debugger output" ],
	['2', '10', '', "Basic $self_name logging." ],
	['2', '11', '', "Full file/system info logging" ],
	['2', '12', '', "Plus Color logging." ],
	['1', '', ,'', "The following create a tar.gz file of system data, plus collecting 
	the inxi output to file. To automatically upload debugger data tar.gz file 
	to ftp.techpatterns.com: inxi^--debug^21" ],
	['2', '20', '', "Full system data collection: /sys; xorg conf and 
	log data, xrandr, xprop, xdpyinfo, glxinfo etc.; data from dev, disks, 
	${partition_string}s, etc." ],
	['2', '21', '', "Upload debugger dataset to $self_name debugger server 
	automatically." ],
	[0, '', '', '' ],
	[0, '', '', "Advanced Options:" ],
	['1', '', '--alt 31', "Turns off hostname in output. Useful if showing output from 
	servers etc." ],
	['1', '', '--alt 32', "Turns on hostname in output. Overrides global \$b_host'" ],
	['1', '', '--alt 33', "Forces use of dmidecode data instead of /sys where 
	relevant (-M)." ],
	['1', '', '--alt 34', "Skips SSL certificate checks for all downloader activies 
	(wget/fetch/curl only). Must go before other options." ],
	['1', '', '--alt 41', "Bypass curl as a downloader option." ],
	['1', '', '--alt 42', "Bypass fetch as a downloader option." ],
	['1', '', '--alt 43', "Bypass wget as a downloader option." ],
	['1', '', '--alt 44', "Bypass curl, fetch, and wget as a downloader options. Forces 
	Perl if HTTP::Tiny present." ]);
	push @data, @rows;
	if ( $type eq 'full' ){
		@rows = (
		[0, '', '', '' ],
		[0, '', '', "Developer and Testing Options (Advanced):" ],
		['1', '', '--alt 1', "Sets testing flag test1='true' to trigger 
		testing condition 1." ],
		['1', '', '--alt 2', "Sets testing flag test2='true' to trigger 
		testing condition 2." ],
		['1', '', '--alt 3', "Sets flags test3='true'." ]
		);
		push @data, @rows;
	}
	output_handler(@data); 
}

########################################################################
#### STARTUP DATA
########################################################################


########################################################################
#### OUTPUT
########################################################################

#### -------------------------------------------------------------------
#### FILTERS
#### -------------------------------------------------------------------


sub print_patch_version {
	my $patch = $self_patch;
	$patch =~ s/^0+//; # strip leading zero(s)
	if ( $patch ne '' ){
		$patch="-$patch";
		# for cases where it was for example: 00-bsd cleaned to --bsd trim out one -
		$patch =~ s/--/-/;
	}
	return $patch;
}


#### -------------------------------------------------------------------
#### GENERATE OUTPUT
#### -------------------------------------------------------------------

sub output_handler {
	my @data = @_;
	# print Dumper \@data;
	if ($output_type eq 'print-basic'){
		print_basic(@data);
	}
	elsif ($output_type eq 'print-line'){
		print_line(@data);
	}
	elsif ($output_type eq 'csv'){
		generate_csv(@data);
	}
	elsif ($output_type eq 'json'){
		generate_json(@data);
	}
	elsif ($output_type eq 'xml'){
		generate_xml(@data);
	}
}


sub show_version {
	# if not in PATH could be either . or directory name, no slash starting
	my $working_path=$self_path;
	my (@data, @row, @rows, $link, $self_string);
	if ( $working_path eq '.' ){
		$working_path=getcwd;
	}
	elsif ( $working_path !~ /^\// ){
		$working_path= getcwd() . "/$working_path";
	}
	# handle if it's a symbolic link, rare, but can happen with directories 
	# in irc clients which would only matter if user starts inxi with -! 30 override 
	# in irc client
	if ( -l "$working_path/$self_name" ){
		$link="$working_path/$self_name";
		$working_path=readlink "$working_path/$self_name";
		$working_path=dirname( $working_path );
	}
	@row = [ 0, '', '', "$self_name $self_version-$self_patch ($self_date)"];
	push @data, @row;
	if ( ! $b_irc ){
		my $year = (split/-/, $self_date)[0];
		@row = [ 0, '', '', "Program Location: $working_path" ];
		push @data, @row;
		if ( $link ){
			@row = [ 0, '', '', "Started via symbolic link: $link" ];
			push @data, @row;
		}
		@rows = (
		[ 0, '', '', "Website:^https://github.com/smxi/inxi^or^http://smxi.org/" ],
		[ 0, '', '', "IRC:^irc.oftc.net channel:^#smxi" ],
		[ 0, '', '', "Forums:^http://techpatterns.com/forums/forum-33.html" ],
		[ 0, '', '', " " ],
		[ 0, '', '', "$self_name - the universal, portable, system information tool 
		for console and irc." ],
		[ 0, '', '', " " ],
		[ 0, '', '', "This program started life as a fork of Infobash 3.02: 
		Copyright^(C)^2005-2007^Michiel^de^Boer^a.k.a.^locsmif." ],
		[ 0, '', '', "Subsequent changes and modifications (after Infobash 3.02): 
		Copyright^(C)^2008-$year^Harald^Hope^aka^h2. 
		CPU/Konversation^fixes:^Scott^Rogers^aka^trash80.
		USB^audio^fixes:^Steven^Barrett^aka^damentz." ],
		[ 0, '', '', '' ],
		[ 0, '', '', "This program is free software; you can redistribute it and/or modify 
		it under the terms of the GNU General Public License as published by the Free Software 
		Foundation; either version 3 of the License, or (at your option) any later version. 
		(http://www.gnu.org/licenses/gpl.html)" ]
		);
		push @data, @rows;
	}
	output_handler(@data); 
}

sub print_screen_line {
	my $line = shift;
	if ( $konvi == 1 && $b_dcop ){
	
	}
	elsif ($konvi == 3 && $b_qdbus){
	
	}
	else {
		print $line;
	}
}

sub print_basic {
	my @data = @_;
	my $indent = 18;
	my $indent_static = 18;
	my $indent1_static = 5;
	my $indent2_static = 8;
	my $indent1 = 5;
	my $indent2 = 8;
	my $length =  @data;
	my ($start,$aref,$i,$j,$line, $word);
	
	if ( $size{'max'} > 110 ){
		$indent_static = 22;
	}
	elsif ($size{'max'} < 90 ){
		$indent_static = 15;
	}
	# print $length . "\n";
	for $i (0 .. $#data){
		$aref = $data[$i];
		#print "0: $data[$i][0]\n";
		if ($data[$i][0] == 0 ){
			$indent = 0;
			$indent1 = 0;
			$indent2 = 0;
		}
		elsif ($data[$i][0] == 1 ){
			$indent = $indent_static;
			$indent1 = $indent1_static;
			$indent2= $indent2_static;
		}
		elsif ($data[$i][0] == 2 ){
			$indent = ( $indent_static + 7 );
			$indent1 = ( $indent_static + 5 );
			$indent2 = 0;
		}
		$data[$i][3] =~ s/\n/ /g;
		$data[$i][3] =~ s/\s+/ /g;
		if ($data[$i][1] && $data[$i][2]){
			$data[$i][1] = $data[$i][1] . ', ';
		}
		$start = sprintf("%${indent1}s%-${indent2}s",$data[$i][1],$data[$i][2]);
		if ($indent > 1 && ( length($start) > ( $indent - 1) ) ){
			$line = sprintf("%-${indent}s\n", "$start");
			print_screen_line($line);
			$start = '';
		}
		if ( ( $indent + length($data[$i][3]) ) < $size{'max'} ){
			$data[$i][3] =~ s/\^/ /g;
			$line = sprintf("%-${indent}s%s\n", "$start", $data[$i][3]);
			print_screen_line($line);
		}
		else {
			my $holder = '';
			my $sep = ' ';
			foreach $word (split ' ', $data[$i][3]){
				#print "$word\n";
				if ( ( $indent + length($holder) + length($word) ) < $size{'max'} ) {
					$word =~ s/\^/ /g;
					$holder = $holder . $word . $sep;
				}
				elsif ( ( $indent + length($holder) + length($word) ) > $size{'max'}){
					$line = sprintf("%-${indent}s%s\n", "$start", $holder);
					print_screen_line($line);
					$start = '';
					$word =~ s/\^/ /g;
					$holder = $word . $sep;
				}
			}
			if ($holder !~ /^[ ]*$/){
				$line = sprintf("%-${indent}s%s\n", "$start", $holder);
				print_screen_line($line);
			}
		}
	}
}


########################################################################
#### DATA PROCESSORS
########################################################################

#### -------------------------------------------------------------------
#### GET DATA
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### SPECIAL DATA HANDLERS - INITIALIZE DATA VALUES
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### SPECIAL DATA HANDLERS - UTILITIES FOR GET DATA/PRINT LINES
#### -------------------------------------------------------------------

sub get_hostname {
	eval $start;
	if ( $ENV{'HOSTNAME'} ){
		return $ENV{'HOSTNAME'};
	}
	else {
		return hostname;
	}
	eval $end;
}

########################################################################
#### PRINT DATA
########################################################################

#### -------------------------------------------------------------------
#### PRINT CONTROLLERS
#### -------------------------------------------------------------------



sub print_it_out {
	eval $start;
	# log_data('cat', '/proc/mounts');
	print "stub: " . (caller(0))[3] . "\n";
	eval $end;
}

#### -------------------------------------------------------------------
#### PRINT LINES
#### -------------------------------------------------------------------



#######################################################################
#### LAUNCH
########################################################################

main(); ## From the End comes the Beginning

## note: this EOF is needed for smxi handling, this is what triggers the full download ok
###**EOF**###
