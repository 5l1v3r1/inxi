#!/usr/bin/env perl

use strict;
use warnings;
# use diagnostics;
use 5.008;

use Data::Dumper qw(Dumper);
use File::Basename;
use File::Find;
# use Getopt::Long qw(GetOptionsFromArray); # :config no_ignore_case bundling_values
use Getopt::Long qw(GetOptions);
# Note: default auto_abbrev is enabled, that's fine
Getopt::Long::Configure ('bundling', 'no_ignore_case');
use Net::FTP;
use POSIX qw(uname);
use Sys::Hostname;
use Term::ANSIColor;

use feature qw(state);

### INXI INFO ###
my $self_name = 'inxi';
my $self_version = '2.9.00';
my $self_date = '2017-12-05';
my $self_patch = '007-p';

### INITIALIZE VARIABLES ###

#my $opt_parser = Getopt::Long::Parser->new;

### USER CONFIGS: SET IN inxi.conf file see wiki for directions ###

my %configs = (
# DISTRO MAINTAINER FLAGS
# flag to allow distro maintainers to turn off update features. If false, 
# turns off -U and -! testing/advanced update options, as well as removing 
# the -U help menu item.
# NOTE: Usually you want to create these in /etc/inxi.conf to avoid having to 
# update each time
'B_ALLOW_UPDATE'          => q(true),
'B_ALLOW_WEATHER'         => q(true),
# for features like help/version will fit to terminal / console screen width.
# Console # widths will be dynamically set in main() based on cols in 
# term/console
'COLS_MAX_CONSOLE'        => 115,
'COLS_MAX_IRC'            => 130,
# note, this is console out of x/display server, will also be set dynamically
# not used currently, but maybe in future
'COLS_MAX_NO_DISPLAY'     => 130,
# Seems like less than .3 doesn't work as reliably
'CPU_SLEEP'               => 0.3,
# change to less, or more if you have very slow connection
'DL_TIMEOUT'              => 4,
'FILTER_STRING'           => q(<filter>),
'PS_COUNT'                => 5,
'SENSORS_CPU_NO'          => 0, # see get_sensors_data
# colors
'CONSOLE_COLOR_SCHEME'    => undef,
'IRC_CONS_COLOR_SCHEME'   => undef,
'IRC_X_TERM_COLOR_SCHEME' => undef,
'IRC_COLOR_SCHEME'        => undef,
'VIRT_TERM_COLOR_SCHEME'  => undef
);

### END USER CONFIGS ###

my $b_irc='';
my $b_root='';
my $b_running_in_display='';

my %file_info;
my %switches;
my $os = '';
my $bsd_type = '';
my $self_config_dir='';
my $self_data_dir='';
my $self_download = '';
my $self_path='';

### DEBGUGGERS ###
my $debugger=0;
my $end='print "END: " . (caller(1))[3] . "\n"';
my $start='print "START: " . (caller(1))[3] . "\n"';


### LAYOUT ###

# These two determine separators in single line output, to force irc clients 
# not to break off sections
my $sep1='~';
my $sep2=' ';
# these will assign a separator to non irc states. Important! Using ':' can 
# trigger stupid emoticon
# behaviors in output on IRC, so do not use those.
my $sep3_irc='';
my $sep3_console=':';
my $sep3=''; # do not set, will be set dynamically
my $line1='---------------------------------------------------------------------------';
my $line2='- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -';

# Default indentation level. NOTE: actual indent is 1 greater to allow for 
# spacing
my $indent=10;

### COLUMN WIDTHS ###
my $cols_inner=0; ## for width minus $indent
my $cols_max=0;

# these will be set dynamically in set_display_width()
my $term_cols=80;
my $term_lines=100;

########################################################################
#### STARTUP
########################################################################

#### -------------------------------------------------------------------
#### MAIN
#### -------------------------------------------------------------------

sub main {
	# print Dumper \@ARGV;
	initialize();
	set_display_width('live');
	get_options();
	set_debugger(); # right after so it's set
	print_it_out();
}

#### -------------------------------------------------------------------
#### INITIALIZE
#### -------------------------------------------------------------------

sub initialize {
	set_os();
	set_path();
	set_user_paths();
	files_info('set');
	my @config_files = (
	qq(/etc/$self_name.conf), 
	qq($self_config_dir/$self_name.conf)
	);
	set_configs(@config_files);
	### LOCALIZATION - DO NOT CHANGE! ###
	# set to default LANG to avoid locales errors with , or .
	# Make sure every program speaks English.
	$ENV{'LANG'}='C';
	$ENV{'LC_ALL'}='C';
	if ( system('tty>/dev/null') ) {
		$b_irc='true';
	}
	# print "birc: $b_irc\n";
	
	if ( $ENV{'HOME'} eq '/root' ){
		$b_root='true';
	}
}

sub set_configs {
	my ($file, $var, $val);
	# Config files should be passed in an array as a param to this function.
	# Default intended use: global @CONFIGS;
	foreach $file (@_) {
		next unless open (CONFIG, "$file");
		while (<CONFIG>) {
			chomp;
			s/#.*//;
			s/^\s+//;
			s/\s+$//;
			s/'//g;
			s/false//; # we want this empty so it trips boolean false
			next unless length;
			($var, $val) = split(/\s*=\s*/, $_, 2);
			$configs{$var} = $val;
			# print "f: $file var: $var val: $val\n";
		}
	}
}

# args: $1 - default OR override default cols max integer count
sub set_display_width {
	my ($cols_override)=@_;
	
	if ( $cols_override eq 'live' ){
		## sometimes tput will trigger an error (mageia) if irc client
		if ( ! $b_irc ){
			if ( check_program('tput') ) {
				chomp($term_cols=qx/tput cols/);
				chomp($term_lines=qx/tput lines/);
			}
			# print "tc: $term_cols cmc: $configs{'COLS_MAX_CONSOLE'}\n";
			# double check, just in case it's missing functionality or whatever
			if ( $term_cols == 0 || $term_cols !~ /\d/ ){ 
				$term_cols=80;
				$term_lines=100;
			}
		}
		# this lets you set different widths for in or out of display server
		# if ( ! $b_running_in_display && $configs{'COLS_MAX_NO_DISPLAY'} != 0 ){
		# 	$configs{'COLS_MAX_CONSOLE'}=$configs{'COLS_MAX_NO_DISPLAY'};
		# }
		# term_cols is set in top globals, using tput cols
		# print "tc: $term_cols cmc: $configs{'COLS_MAX_CONSOLE'}\n";
		if ( $term_cols < $configs{'COLS_MAX_CONSOLE'} ){
			$configs{'COLS_MAX_CONSOLE'}=$term_cols;
		}
		# adjust, some terminals will wrap if output cols == term cols
		$configs{'COLS_MAX_CONSOLE'}=( $configs{'COLS_MAX_CONSOLE'} - 2 );
		# echo cmc: $configs{'COLS_MAX_CONSOLE'}
		# comes after source for user set stuff
		if ( ! $b_irc ){
			$cols_max=$configs{'COLS_MAX_CONSOLE'};
		}
		else {
			$cols_max=$configs{'COLS_MAX_IRC'};
		}
	}
	else {
		$cols_max=$cols_override;
	}
	$cols_inner= ( $cols_max - $indent - 1 );
	print "tc: $term_cols cmc: $configs{'COLS_MAX_CONSOLE'} cm: $cols_max ci: $cols_inner\n";
}

sub set_os {
	my @uname = uname();
	$os = lc($uname[0]);
	if ( $os =~ /(bsd|dragonfly|darwin)/ ){
		if ( $os =~ /openbsd/ ){
			$bsd_type = 'openbsd';
		}
		elsif ($os =~ /darwin/){
			$bsd_type = 'darwin';
		}
		elsif ($os =~ /kfreebsd/){
			$bsd_type = 'debian-bsd';
		}
		else {
			$bsd_type = 'bsd';
		}
	}
}


sub set_path {
	my $added_paths = '';
	# Extra path variable to make execute failures less likely, merged below
	my @path = split ':', $ENV{'PATH'};
	my @extra_paths=split ':', '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/opt/local/bin';
	#print "PATH=$ENV{'PATH'}\n";
	# this needs to be set here because various options call the parent 
	# initialize function directly.
	$self_path=dirname "$0";
	# Create a difference of $PATH and $extra_paths and add that to $PATH:
	foreach (@extra_paths) {
		if ( ! grep(/$_/, @path) ){
			$added_paths="$added_paths:$_";
			# print "$path\n";
		}
	}
	$ENV{'PATH'} = $ENV{'PATH'} . $added_paths;
	# print "PATH=$ENV{'PATH'}\n";
	##/bin/sh -c 'echo "PATH in subshell=\"$PATH\""'
}

sub set_user_paths {
	my ( $b_conf, $b_data );
	
	if ( defined $ENV{'XDG_CONFIG_HOME'} && $ENV{'XDG_CONFIG_HOME'} ne '' ){
		$self_config_dir=$ENV{'XDG_CONFIG_HOME'};
		$b_conf='true';
	}
	elsif ( -d "$ENV{'HOME'}/.config" ){
		$self_config_dir="$ENV{'HOME'}/.config";
		$b_conf='true';
	}
	else {
		$self_config_dir="$ENV{'HOME'}/.$self_name";
	}
	if ( defined $ENV{'XDG_DATA_HOME'} && $ENV{'XDG_DATA_HOME'} ne '' ){
		$self_data_dir="$ENV{'XDG_DATA_HOME'}/$self_name";
		$b_data='true';
	}
	elsif ( -d "$ENV{'HOME'}/.local/share" ){
		$self_data_dir="$ENV{'HOME'}/.local/share/$self_name";
		$b_data='true';
	}
	else {
		$self_data_dir="$ENV{'HOME'}/.$self_name";
	}
	# note, this used to be created/checked in specific instance, but we'll just do it
	# universally so it's done at script start.
	if ( ! -d $self_data_dir ){
		#system 'mkdir', $self_data_dir;
		system "echo", "WOULD: $self_data_dir";
	}
	if ( $b_conf eq 'true' && -f "$ENV{'HOME'}/.$self_name/$self_name.conf" ){
		#system 'mv', "-f $ENV{'HOME'}/.$self_name/$self_name.conf", $self_config_dir;
		print "WOULD: Moved $self_name.conf from $ENV{'HOME'}/.$self_name to $self_config_dir\n";
	}
	if ( $b_data eq 'true' && -d "$ENV{'HOME'}/.$self_name" ){
		#system 'mv', '-f', "$ENV{'HOME'}/.$self_name/*", $self_data_dir;
		#system 'rm', '-Rf', "$ENV{'HOME'}/.$self_name";
		print "WOULD: Moved data dir $ENV{'HOME'}/.$self_name to $self_data_dir\n";
	}
	#system 'echo', "$ENV{'HOME'}/.$self_name/* $self_data_dir";
	
	# 	$log_file="$self_data_dir/$log_file";
	# 	$log_file_1="$self_data_dir/$log_file_1";
	# 	$log_file_2="$self_data_dir/$log_file_2";
	# print "scd: $self_config_dir sdd: $self_data_dir \n";
}

sub files_info {
	my ($type) = @_;
	
	if ( $type eq 'set'){
		my %info_files = (
		'asound-cards' => '/proc/asound/cards',
		'asound-modules' => '/proc/asound/modules',
		'asound-version' => '/proc/asound/version',
		'cpuinfo' => '/proc/cpuinfo',
		'dmesg-boot' => '/var/run/dmesg.boot',
		'lsb-release' => '/etc/lsb-release',
		'mdstat' => '/proc/mdstat',
		'meminfo' => '/proc/meminfo',
		'modules' => '/proc/modules',
		'mounts' => '/proc/mounts',
		'os-release' => '/etc/os-release',
		'partitions' => '/proc/partitions',
		'scsi' => '/proc/scsi/scsi',
		'xorg-log' => '/var/log/Xorg.0.log'
		);
		foreach my $key ( keys %info_files ){
			$file_info{$key} = -e $info_files{$key} ? $info_files{$key} : '';
		}
		if ( ! $file_info{'xorg-log'} && check_program('xset') ){
			my $data = qx(xset q 2>/dev/null);
			foreach ( split /\n/, $data){
				if ($_ =~ /Log file/i){
					$file_info{'xorg-log'} = get_piece($_,3);
					last;
				}
			}
		}
	}
	else {
		return $file_info{$type};
	}
}


########################################################################
#### UTILITIES
########################################################################

#### -------------------------------------------------------------------
#### COLOR SELECTOR
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### DEBUGGERS
#### -------------------------------------------------------------------


sub set_debugger {
	if ( $debugger < 5){
		$end = '';
		$start = '';
	}
}


#### -------------------------------------------------------------------
#### DOWNLOADER
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### ERROR HANDLER
#### -------------------------------------------------------------------

sub error_handler {
	my ( $num, $one, $two) = @_;
	print "Error $num: option: $one";
	if ($two){
		print " value: $two is incorrect.";
	}
	print "\nCheck -h for correct parameters.\n";
	exit $num;
}


#### -------------------------------------------------------------------
#### LOGGING
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### RECOMMENDS
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### TOOLS
#### -------------------------------------------------------------------

## returns result of test, 0/1, false/true
## arg: program to find in PATH
sub check_program {
	grep { -x "$_/$_[0]"}split /:/,$ENV{PATH};
}

sub get_piece {
	my ($string, $num, $sep) = @_;
	$num--;
	$sep ||= ' ';
	my @temp = split $sep, $string, -1;
	if ( exists $temp[$num] ){
		return $temp[$num];
	}
}

#### -------------------------------------------------------------------
#### UPDATER
##### -------------------------------------------------------------------

sub self_updater {

}

########################################################################
#### OPTIONS HANDLER
########################################################################

sub get_options{
	my (@args) = @_;
	# my @argv = @ARGV;
	$switches{'short'} = 'true';
	# $switches{''} = 'true';
	#$opt_parser->configure('no_ignore_case');
	# GetOptionsFromArray(\@argv, 
	GetOptions (
	'A|audio' => sub {
		$switches{'short'} = '';
		$switches{'audio'} = 'true';},
	'b|basic' => sub {
		$switches{'short'} = '';
		$switches{'battery'} = 'true';
		$switches{'cpu-basic'} = 'true';
		$switches{'raid-basic'} = 'true';
		$switches{'disk-total'} = 'true';
		$switches{'graphics'} = 'true';
		$switches{'info'} = 'true';
		$switches{'machine'} = 'true';
		$switches{'network'} = 'true';},
	'B|battery' => sub {
		$switches{'short'} = '';
		$switches{'battery'} = 'true';
		$switches{'battery-forced'} = 'true'; },
	'c|color:i' => sub {
		$switches{'short'} = '';
		$switches{''} = 'true'; },
	'C|cpu' => sub {
		$switches{'short'} = '';
		$switches{'cpu'} = 'true'; },
	'd|disk-all' => sub {
		$switches{'short'} = '';
		$switches{'disk'} = 'true';
		$switches{'optical-full'} = 'true'; },
	'D' => sub {
		$switches{'short'} = '';
		$switches{'disk'} = 'true'; },
	'f|cpu-flags' => sub {
		$switches{'short'} = '';
		$switches{'cpu'} = 'true';
		$switches{'cpu-flags-full'} = 'true'; },
	'F|full' => sub {
		$switches{'short'} = '';
		$switches{'audio'} = 'true';
		$switches{'battery'} = 'true';
		$switches{'cpu'} = 'true';
		$switches{'disk'} = 'true';
		$switches{'graphics'} = 'true';
		$switches{'info'} = 'true';
		$switches{'machine'} = 'true';
		$switches{'network'} = 'true';
		$switches{'network-advanced'} = 'true';
		$switches{'partitions'} = 'true';
		$switches{'raid'} = 'true';
		$switches{'sensors'} = 'true';
		$switches{'system'} = 'true'; },
	'G|graphics' => sub {
		$switches{'short'} = '';
		$switches{'graphics'} = 'true'; },
	'i|internet' => sub {
		$switches{'short'} = '';
		$switches{'ip'} = 'true';
		$switches{'network'} = 'true';
		$switches{'network-advanced'} = 'true'; },
	'I|info' => sub {
		$switches{'short'} = '';
		$switches{'info'} = 'true'; },
	'l|labels' => sub {
		$switches{'short'} = '';
		$switches{'labels'} = 'true';
		$switches{'partitions'} = 'true'; },
	'm|memory' => sub {
		$switches{'short'} = '';
		$switches{'memory'} = 'true'; },
	'M|machine' => sub {
		$switches{'short'} = '';
		$switches{'machine'} = 'true'; },
	'n|network-advanced' => sub {
		$switches{'short'} = '';
		$switches{'network'} = 'true';
		$switches{'network-advanced'} = 'true'; },
	'N|network' => sub {
		$switches{'short'} = '';
		$switches{'network'} = 'true'; },
	'o|unmounted' => sub {
		$switches{'short'} = '';
		$switches{'unmounted'} = 'true'; },
	'p|partitions-full' => sub {
		$switches{'short'} = '';
		$switches{'partitions'} = 'true';
		$switches{'partitions-full'} = 'true'; },
	'P|partitions' => sub {
		$switches{'short'} = '';
		$switches{'partitions'} = 'true'; },
	'r|repos' => sub {
		$switches{'short'} = '';
		$switches{'repos'} = 'true'; },
	'R|raid' => sub {
		$switches{'short'} = '';
		$switches{'raid'} = 'true';
		$switches{'raid-forced'} = 'true'; },
	's|sensors' => sub {
		$switches{'short'} = '';
		$switches{'sensors'} = 'true'; },
	'S|system' => sub {
		$switches{'short'} = '';
		$switches{'system'} = 'true'; },
	't|processes:s' => sub {
		my ($opt,$arg) = @_;
		$switches{'short'} = '';
		if ( $arg =~ /^([cm]+)([1-9]|1[0-9]|20)?$/ ){
			if ($arg =~ /c/){
				$switches{'ps-cpu'} = 'true';
			}
			if ($arg =~ /m/){
				$switches{'ps-mem'} = 'true';
			}
			if ($arg =~ /([0-9]+)/ ){
				$configs{'PS_COUNT'} = $1;
			}
		}
		else {
			error_handler(100,$opt,$arg);
		} },
	'u|uuid' => sub {
		$switches{'short'} = '';
		$switches{'partitions'} = 'true';
		$switches{'uuids'} = 'true'; },
	'U|update' => sub {
		my ($opt,$arg) = @_;
		$switches{'short'} = '';
		if ( $configs{'B_ALLOW_UPDATE'} ){
			self_updater( $self_download, 'source server', "$opt" );
		}
		else {
			error_handler(17, $opt);
		} },
	'v|verbosity:i' => sub {
		my ($opt,$arg) = @_;
		$switches{'short'} = '';
		if ( $arg =~ /^[0-7]$/ ){
			if ($arg == 0 ){
				$switches{'short'} = 'true';
			}
			if ($arg >= 1 ){
				$switches{'cpu-basic'} = 'true';
				$switches{'disk-total'} = 'true';
				$switches{'graphics'} = 'true';
				$switches{'info'} = 'true';
				$switches{'system'} = 'true';
			}
			if ($arg >= 2 ){
				$switches{'battery'} = 'true';
				$switches{'disk-basic'} = 'true';
				$switches{'raid-basic'} = 'true';
				$switches{'machine'} = 'true';
				$switches{'network'} = 'true';
			}
			if ($arg >= 3 ){
				$switches{'network-advanced'} = 'true';
				$switches{'cpu'} = 'true';
				$switches{'extra-1'} = 'true';
			}
			if ($arg >= 4 ){
				$switches{'disk'} = 'true';
				$switches{'partitions'} = 'true';
			}
			if ($arg >= 5 ){
				$switches{'audio'} = 'true';
				$switches{'memory'} = 'true';
				$switches{'labels'} = 'true';
				$switches{'memory'} = 'true';
				$switches{'raid'} = 'true';
				$switches{'sensors'} = 'true';
				$switches{'uuid'} = 'true';
			}
			if ($arg >= 6 ){
				$switches{'optical-full'} = 'true';
				$switches{'partitions-full'} = 'true';
				$switches{'unmounted'} = 'true';
				$switches{'extra-2'} = 'true';
			}
			if ($arg >= 7 ){
				$switches{'ip'} = 'true';
				$switches{'raid-forced'} = 'true';
				$switches{'extra-3'} = 'true';
			}
		}
		else {
			error_handler(100,$opt,$arg);
		} },
	'V|version' => sub { 
		print_version(); },
	'w|weather' => sub {
		$switches{'short'} = '';
		$switches{''} = 'true'; },
	'W|weather-location' => sub {
		$switches{'short'} = '';
		$switches{''} = 'true'; },
	'x' => sub {
		if ( ! $switches{'extra-1'} ){
			$switches{'extra-1'} = 'true';
		}
		elsif ( ! $switches{'extra-2'} ){
			$switches{'extra-2'} = 'true';
		}
		elsif ( ! $switches{'extra-3'} ){
			$switches{'extra-4'} = 'true';
		} },
	'y|width:i' => sub {
		my ($opt, $arg) = @_;
		if ( $arg =~ /\d/ && $arg >= 80 ){
			set_display_width($arg);
		}
		else {
			error_handler(21, $opt, $arg);
		} },
	'z|filter-output' => sub {
		$switches{'filter-output'} = 'true'; },
	'Z|filter-override' => sub {
		$switches{'filter-override'} = 'true'; },
	'h|help|?' => sub {
		show_options('standard'); },
	'H|help-full' => sub {
		show_options('full'); },
	'debug:i' => sub { 
		my ($opt,$arg) = @_;
		if ($arg =~ /^[0-9]+$/ && $arg > 0){
			$debugger=$arg;
		}
		else {
			error_handler(21, $opt, $arg);
		} },
	'alt:i' => sub { 
		my ($opt,$arg) = @_;
		print "alt $arg\n"; },
	'<>' => sub {
		my ($opt) = @_;
		error_handler(2, "Unknown argument: $opt", "" );
	}
	) or error_handler(3, 'Unknown Option', '');
	# print "dump\n" . Dumper \@ARGV;
# 	if ( @ARGV ) {
# 		error_handler(1, "Uknown option $ARGV[0] given!", "" );
# 		@ARGV=undef;
# 	}
	#@ARGV = @argv; 
} 

sub show_options {
	
	print "stub: " . (caller(0))[3] . "\n";
	
	exit 1;
}


########################################################################
#### STARTUP DATA
########################################################################


########################################################################
#### OUTPUT
########################################################################

#### -------------------------------------------------------------------
#### FILTERS
#### -------------------------------------------------------------------


sub print_patch_version {
	my $patch = $self_patch;
	$patch =~ s/^0+//; # strip leading zero(s)
	if ( $patch ne '' ){
		$patch="-$patch";
		# for cases where it was for example: 00-bsd cleaned to --bsd trim out one -
		$patch =~ s/--/-/;
	}
	return $patch;
}


#### -------------------------------------------------------------------
#### PRINT
#### -------------------------------------------------------------------


sub print_version {
	print "$self_name version: $self_version" . print_patch_version() . " date: $self_date\n";
}




########################################################################
#### DATA PROCESSORS
########################################################################

#### -------------------------------------------------------------------
#### GET DATA
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### SPECIAL DATA HANDLERS - INITIALIZE DATA VALUES
#### -------------------------------------------------------------------


#### -------------------------------------------------------------------
#### SPECIAL DATA HANDLERS - UTILITIES FOR GET DATA/PRINT LINES
#### -------------------------------------------------------------------

sub get_hostname {
	eval $start;
	if ( $ENV{'HOSTNAME'} ne '' ){
		return $ENV{'HOSTNAME'};
	}
	else {
		return hostname;
	}
	eval $end;
}

########################################################################
#### PRINT DATA
########################################################################

#### -------------------------------------------------------------------
#### PRINT CONTROLLERS
#### -------------------------------------------------------------------

sub print_it_out {
	eval $start;
	print "stub: " . (caller(0))[3] . "\n";
	eval $end;
}

#### -------------------------------------------------------------------
#### PRINT LINES
#### -------------------------------------------------------------------


########################################################################
#### LAUNCH
########################################################################

main(); ## From the End comes the Beginning

## note: this EOF is needed for smxi handling, this is what triggers the full download ok
###**EOF**###
