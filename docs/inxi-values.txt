================================================================================
INXI VALUES
================================================================================
FILE:    inxi-values.txt
VERSION: 1.9
DATE:    2018-01-04

----------------------------------------

See: perl-programming.txt

----------------------------------------
Comments:

The main values used by inxi internally, this is a reference so you don't
always have to look it up in the code.

================================================================================

Sections:
1. CONFIG VALUES
2. HASHED VALUES

================================================================================
CONFIG VALUES
--------------------------------------------------------------------------------

========================================
USER CONFIG
----------------------------------------

These come from config files:
/etc/inxi.conf 
$HOME/.inxi.conf  


VALUES:
B_ALLOW_UPDATE          # $b_update = 'true'
B_ALLOW_WEATHER         # $b_weather = 'true'

# Seems like less than .3 doesnt work as reliably
CPU_SLEEP               # $cpu_sleep = 0.3
# change to less, or more if you have very slow connection
DL_TIMEOUT              # $dl_timeout = 4
DOWNLOADER              # $dl{'dl'} = curl|fetch|ftp|perl|wget
FILTER_STRING           # $filter_string = '<filter>'
OUTPUT_TYPE             # $output_type = [csv|json|screen|xml]
PS_COUNT                # $ps_count = 5
SENSORS_CPU_NO          # $sensors_cpu_nu = 0 # see get_sensors_data
### layout
CONSOLE_COLOR_SCHEME    # $colors{'console'} = 0
GLOBAL_COLOR_SCHEME     # $colors{'global'} = 0
IRC_CONS_COLOR_SCHEME   # $colors{'console-irc'} = 0
IRC_X_TERM_COLOR_SCHEME # $colors{'irc-virt-term'} = 0
IRC_COLOR_SCHEME        # $colors{'irc-gui'} = 0
VIRT_TERM_COLOR_SCHEME  # $colors{'virt-term'} = 0
SEP1='~'                # $sep{'s1'} = '~'
SEP2=' '                # $sep{'s2'} = ' '
# these will assign a separator to non irc states. Important! Using ':' can trigger stupid emoticon
# behaviors in output on IRC, so do not use those.
SEP3_IRC=''             # $sep{'irc'} = ''
SEP3_CONSOLE=':'        # $sep{'console'} = ':'
### widths
# for features like help/version will fit to terminal / console screen width.
# Console # widths will be dynamically set in main() based on cols in 
# term/console
COLS_MAX_CONSOLE        # $size{'console'} = 115
COLS_MAX_IRC            # $size{'irc'} = 130
# note, this is console out of x/display server, will also be set dynamically
# not used currently, but maybe in future
COLS_MAX_NO_DISPLAY     # $size{'no-display'} = 130

================================================================================
HASHED VALUES
--------------------------------------------------------------------------------

These hashes contain data that will be used for tests and data collection.

========================================
ALERTS / WARNINGS
----------------------------------------
my (%alerts,%hash);

%hash = (
'dmidecode' => {
'action' => 'use', # use: true, else missing|permissions|smbios error
'missing' => 'Required program dmidecode not available.',
'permissions' => 'Required program dmidecode not available.',
'smbios' => 'No SMBIOS data for dmidecode to process.',
},
);
%alerts = (%alerts, %hash);
%hash = (
[xrandr xdpyinfo glxinfo] => {
'action' => $action,
'missing' => "Missing: $_ - continuing in non desktop mode. Check --recommends",
'in-console' => 'See --display option to get graphics data',
},
);
%alerts = (%alerts, %hash);

[pciconf sysctl] => {
'action' => $action,
'missing' => "Missing system tool: $_. Output will be incomplete",
'permissions' => "Unable to run $_. Root required?",
},
);
%alerts = (%alerts, %hash);

%hash = (
[lspci] => {
'action' => $action,
'missing' => "Missing system tool: $_. Output will be incomplete",
'permissions' => "Unable to run $_. Root required?",
},
);
%alerts = (%alerts, %hash);

========================================
CLIENT
----------------------------------------

%client = (
'console'     => [01],
'console-irc' => [01],
'dcop'        => [01],
'dobject'     => [default|konversation]
'dport'       => '',
'dserver'     => '',
'dtarget'     => '',
'konvi'       => [0123], # level of konvi for internal use. 2 is /cmd start
'name'        => [lower case client name]
'name-print'  => [Display version of name]
'native'      => [01], # konvi: /cmd = 0; /pinxi = 1
'qdbus'       => [01],
'version'     => [client version],
);

========================================
COLORS
----------------------------------------

%colors = (
'c1'            => [irc/console color]
'c2'            => [irc/console color]
'console'       => [0-42]
'cn'            => [reset normal irc/console color]
'default'       => 2 - set in set_basics()
'global'        => [0-12]
'irc-console'   => [0-12]
'irc-gui'       => [0-12]
'irc-virt-term' => [0-12]
'scheme'        => [0-42]
# corresponds to: 94: console 95: virt-term 96: irc-gui 
# 97: irc-virt-term 98: irc-console 99: global 
'selector'      => [94-99]
'virt-term'     => [0-42]
);

========================================
DEBUG
----------------------------------------

Set by option: --debug [0-9]+

$debug = [1-3|10-12|20-22]

set_debugger() sets the various actions.

1-3   - basic debugging 
10-12 - log debugging. 10 - log; 11 - full, with file data; 
        12 - full+colors [not used}
20-22 - full debugger data collector debugging, with /sys parsing

20 runs data debugger, 21-22 upload data

========================================
DOWNLOADER
----------------------------------------

%dl = (
# switches
'curl'       => [01],
'fetch'      => [01],
'ftp'        => [01],
'perl'       => [01],
'wget'       => [01],
# options
'dl'         => [|curl|fetch|ftp|perl|wget] null means no downloader found or used.
'file'       => [arguments for downloader type for file download]
'no-ssl'     => [argument for no ssl checks: set by downloader type]
'no-ssl-opt' => [assigns no-ssl: set by --alt 34]
'spider'     => [ wget/tiny only: spider the file to test if it's there]
'stdout'     => [arguments for downloader type for stdout output]
'timeout'    => [the time out option (eg: -T), paired with $dl_timeout]
)

========================================
FILE ASSIGNMENT/TESTS
----------------------------------------

Used to pack: %system_files

The tests will return EITHER the file path OR an empty string.

Thus, the use will be like this. I was actually surprised to find this works
in perl, but tests show it does. This will return either false, '', or the
file path. Since the path is there, it shows as true, and also the variable
has been packed for use in the following.

NOTE: need to confirm this is solid in 5.08

if ( my $mount = files_info{'mount'} ){
	do stuff.
}

%files = (
'asound-cards'   => '/proc/asound/cards',
'asound-modules' => '/proc/asound/modules',
'asound-version' => '/proc/asound/version',
'cpuinfo'        => '/proc/cpuinfo',
'dmesg-boot'     => '/var/run/dmesg.boot',
'lsb-release'    => '/etc/lsb-release',
'mdstat'         => '/proc/mdstat',
'meminfo'        => '/proc/meminfo',
'modules'        => '/proc/modules',
'mounts'         => '/proc/mounts',
'os-release'     => '/etc/os-release',
'partitions'     => '/proc/partitions',
'scsi'           => '/proc/scsi/scsi',
'xorg-log'       => '/var/log/Xorg.0.log' # or xset path
);

========================================
OUTPUT 
----------------------------------------

These hashes contain the settings for colors, separators, and sizes

----------------------------------------
%colors
----------------------------------------

----------------------------------------
%sep 
----------------------------------------

$sep{'s1'}='~';      # short form
$sep{'s2'}=' ';      # short form
$sep{'irc'}='';       # long form irc
$sep{'console'}=':';  # long form console
$sep{'s3'}='';      # dynamic long, either console or irc

----------------------------------------
%size
----------------------------------------

$size{'console'} 
$size{'indent'} = 10;
# to change default of < indent-cols triggering start line wrap and 2 indent
$size{'indent-min'}=90; 
$size{'irc'}
$size{'max'}=0;
$size{'no-display'}

# these will be set dynamically in set_display_width()
$size{'term'}=80;
$size{'term-lines'}=100;

========================================
PRINT LINE SWITCHES
----------------------------------------

%show

This is a global that assigns print row boolean values.

These are set in the get_options function.

%show = (
'audio'            # -A/--audio
'battery'          # -b/-F battery only if present
'battery-forced    # -B/--battery
'cpu'              # -C/--cpu
'cpu-basic'        # -b/--basic/-v 1 cpu line
'cpu-flags'        # -C/--cpu and full flags
'disk'             # -D/--disk
'disk-all'         # -D/--disk-all + -o
'disk-basic'       # -v 2 Disk data
'disk-total'       # -b/--basic/ -v 1 Disk
'extra'            # -x, -xx, -xxx, --extra [0-3]. Repeat or integer arg.
                   #  Either increments (-xxx) or uses option value (-x 3)
'filter-output'    # all, filters output. Auto on in IRC unless disabled by -Z
'filter-override'  # overrides IRC filter
'graphics'         # -G/--graphics
'host'             # -S/--system. Default: true. --alt 31/32 disable/enable
'info'             # -I/--info
'ip'               # -i/--internet
'labels'           # -l/--labels [-P or -p + labels]
'machine'          # -M/--machine
'memory'           # -m/--memory
'network'          # -N/--network
'network-advanced' # -n/--network-advanced/ -v 3
'partitions'       # -P/--partitions basic
'partitions-full'  # -p/--partitions-full
'ps-cpu'           # -t with c [count]. Sets: $configs{'PS_COUNT'}
'ps-mem'           # -t with m [count]. Sets: $configs{'PS_COUNT'}
'raid'             # -R/--raid, sets raid, raid-forced
'raid-basic'       # -b / -F / -v 2 raid, only show if data is there
'raid-forced'      # -R/--raid, show if raid there or not
'repos'            # -r / --repos
'sensors'          # -s/--sensors
'short'            # inxi short form, no args
'system'           # -S/--system
'unmounted'        # -o/--unmounted
'uuid'             # -p/-P with UUID
'weather'          # -w / --weather
'weather-location' # -W / --weather-location
'width'            # -y/--width 80-130
);

========================================
USE SWITCHES
----------------------------------------

%use

This is a global that determines whether to use tools or not, and in the case
of not, which, if any, alert messages to show.

These are set in get_options() and check_tools().

%use = (
'dmidecode-force' => 1, # unset or 1
'' => '',
);


